// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(user)
  posts     Post[]
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
}

enum Role {
  user  @map("user")
  admin @map("admin")
}

model Author {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id       String    @id @default(uuid())
  title    String
  votes    Int       @default(0)
  author   Author?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?
  comments Comment[]
}

model Comment {
  id          String  @id @default(uuid())
  commentText String
  book        Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String?
}
